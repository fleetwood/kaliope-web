generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("REACT_APP_DATABASE_URL")
}

model Image {
  imageid      String     @id @default(cuid())
  created_at   DateTime?  @db.Timestamptz(0)
  updated_at   DateTime?  @db.Timestamptz(0)
  url          String     @db.VarChar(255)
  title        String?    @db.VarChar(255)
  description  String?    @db.VarChar(255)
  metadata     Json?
  galleryid    String?
  imageGallery Gallery    @relation("image_gallery", fields: [imageid], references: [galleryid])
  agencyLogo   Agency?    @relation("agency_logo")
  book         Book?      @relation("book_cover")
  character    Character? @relation("character_avatar")
}

model Gallery {
  galleryid   String     @id @default(cuid())
  created_at  DateTime?  @db.Timestamptz(0)
  updated_at  DateTime?  @db.Timestamptz(0)
  url         String     @db.VarChar(255)
  title       String?    @db.VarChar(255)
  description String?    @db.VarChar(255)
  chapterid   String?    @unique
  characterid String?    @unique
  profileid   String?    @unique
  agencyid    String?    @unique
  agency      Agency?    @relation("agency_gallery", fields: [agencyid], references: [agencyid])
  profile     Profile?   @relation("profile_gallery", fields: [profileid], references: [id])
  chapter     Chapter?   @relation("chapter_gallery")
  character   Character? @relation("character_gallery")
  images      Image?     @relation("image_gallery")
}

model Agency {
  agencyid    String    @id @default(cuid())
  created_at  DateTime? @db.Timestamptz(0)
  updated_at  DateTime? @db.Timestamptz(0)
  description String
  logoid      String?   @unique
  logo        Image?    @relation("agency_logo", fields: [logoid], references: [imageid])
  galleries   Gallery?  @relation("agency_gallery")
}

model Chapter {
  chapterid        String      @id @default(cuid())
  created_at       DateTime?   @db.Timestamptz(0)
  updated_at       DateTime?   @db.Timestamptz(0)
  chapterOrder     Int
  bookid           String      @unique
  galleryid        String      @unique
  book             Book        @relation("book_chapters", fields: [bookid], references: [bookid])
  imageGallery     Gallery     @relation("chapter_gallery", fields: [galleryid], references: [galleryid])
  chapter_comments Comment[]   @relation("chapter_comments")
  characters       Character[] @relation("chapter_characters")
}

model Character {
  characterid  String    @id @default(cuid())
  created_at   DateTime? @db.Timestamptz(0)
  updated_at   DateTime? @db.Timestamptz(0)
  bookid       String    @unique
  name         String
  description  String
  avatarid     String?   @unique
  galleryid    String    @unique
  avatar       Image?    @relation("character_avatar", fields: [avatarid], references: [imageid])
  book         Book      @relation("book_characters", fields: [bookid], references: [bookid])
  imageGallery Gallery   @relation("character_gallery", fields: [galleryid], references: [galleryid])
  comments     Comment[] @relation("character_comments")
  chapters     Chapter[] @relation("chapter_characters")
}

model Book {
  bookid          String       @id @default(cuid())
  authorid        String       @db.VarChar(255)
  created_at      DateTime?    @db.Timestamptz(0)
  updated_at      DateTime?    @db.Timestamptz(0)
  title           String       @db.VarChar(512)
  description     String
  coverid         String?      @unique
  synopsis        String?
  tagline         String?
  author          Profile      @relation("profile_books", fields: [authorid], references: [id])
  cover           Image?       @relation("book_cover", fields: [coverid], references: [imageid])
  book_ratings    BookRating[] @relation("book_ratings")
  book_chapters   Chapter?     @relation("book_chapters")
  book_characters Character?   @relation("book_characters")
  book_comments   Comment[]    @relation("book_comments")
  genres          Genre[]      @relation("book_genre")
}

model Genre {
  genreid    String    @id @default(cuid())
  icon       String    @db.VarChar(255)
  label      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamptz(0)
  updated_at DateTime? @db.Timestamptz(0)
  books      Book[]    @relation("book_genre")
}

model BookRating {
  bookratingid String    @id @default(cuid())
  authorid     String
  bookid       String
  created_at   DateTime? @db.Timestamptz(0)
  updated_at   DateTime? @db.Timestamptz(0)
  author       Profile   @relation("profile_ratings", fields: [authorid], references: [id])
  book         Book      @relation("book_ratings", fields: [bookid], references: [bookid])
}

model Comment {
  commentid   String    @id @default(cuid())
  authorid    String
  created_at  DateTime? @db.Timestamptz(0)
  updated_at  DateTime? @db.Timestamptz(0)
  content     String
  bookid      String
  chapterid   String
  characterid String
  author      Profile   @relation("profile_comments", fields: [authorid], references: [id])
  book        Book      @relation("book_comments", fields: [bookid], references: [bookid])
  chapter     Chapter   @relation("chapter_comments", fields: [chapterid], references: [chapterid])
  character   Character @relation("character_comments", fields: [characterid], references: [characterid])
}

model Post {
  postid         String    @id @default(cuid())
  created_at     DateTime? @db.Timestamptz(0)
  updated_at     DateTime? @db.Timestamptz(0)
  visible        Boolean   @default(true)
  title          String    @db.VarChar(255)
  subtitle       String?   @db.VarChar(255)
  header_image   String?   @db.VarChar(255)
  content        String
  authorId       String
  author         Profile   @relation("profile_posts", fields: [authorId], references: [id])
  threadParentId String?
  threadParent   Post?     @relation("post_thread", fields: [threadParentId], references: [postid])
  thread         Post[]    @relation("post_thread")
}

model Message {
  messageid       String    @id @default(cuid())
  senderId        String
  sender          Profile   @relation("message_outbox", fields: [senderId], references: [id])
  recipientId     String
  recipient       Profile   @relation("message_inbox", fields: [recipientId], references: [id])
  visible         Boolean   @default(true)
  read            Boolean   @default(false)
  createdAt       DateTime? @db.Timestamptz(0)
  lastLoginAt     DateTime? @db.Timestamptz(0)
  content         String
  messageParentId String?
  messageParent   Message?  @relation("message_thread", fields: [messageParentId], references: [messageid])
  messages        Message[] @relation("message_thread")
}

model Profile {
  id                String       @id @default(cuid())
  displayName       String?
  photoURL          String?
  createdAt         DateTime?    @db.Timestamptz(0)
  lastLoginAt       DateTime?    @db.Timestamptz(0)
  books             Book[]       @relation("profile_books")
  ratings           BookRating[] @relation("profile_ratings")
  comments          Comment[]    @relation("profile_comments")
  galleries         Gallery?     @relation("profile_gallery")
  posts             Post[]       @relation("profile_posts")
  totalLikes        Int          @default(0)
  totalShares       Int          @default(0)
  totalFollows      Int          @default(0)
  totalFollowers    Int          @default(0)
  FollowsProfileId  String?
  FollowsProfile    Profile?      @relation("profile_follows", fields: [FollowsProfileId], references: [id], onDelete: Cascade)
  Follows           Profile[]    @relation("profile_follows")
  FollowerProfileId String?
  FollowerProfile   Profile?      @relation("profile_followers", fields: [FollowerProfileId], references: [id], onDelete: Cascade)
  Followers         Profile[]    @relation("profile_followers")
  Inbox             Message[]    @relation("message_inbox")
  Outbox            Message[]    @relation("message_outbox")
  user              User         @relation(fields: [id], references: [id])
}

model AccountStatus {
  modelid String @id @default(cuid())
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  profile       Profile?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
